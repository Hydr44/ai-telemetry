name: Publish App Telemetry (external)

on:
  schedule:
    - cron: "*/30 * * * *"
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      # Checkout del repo AI TELEMETRY (qui scriveremo app/status.json)
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: "20"

      # Clona il REPO DELLA TUA APP in sottocartella appsrc
      - name: Checkout app repo
        uses: actions/checkout@v4
        with:
          repository: Hydr44/rescuemanager-app
          path: appsrc
          # Se l'app è privata, serve un token con permesso READ sul repo app:
          token: ${{ secrets.APP_READ_PAT }}

      # Se il tuo package.json è nella root del repo app, lascia così.
      # Se è in una sottocartella (es. web/), aggiungi "working-directory: appsrc/web"
      - name: Build app status
        working-directory: appsrc
        run: |
          if [ -f package.json ]; then
            node -e "const fs=require('fs'); const crypto=require('crypto'); const pkg=require('./package.json'); const lock=['pnpm-lock.yaml','yarn.lock','package-lock.json'].find(f=>fs.existsSync(f)); const lockHash=lock?crypto.createHash('sha256').update(fs.readFileSync(lock)).digest('hex').slice(0,16):null; const status={ generated_at:new Date().toISOString(), source_repo:process.env.GITHUB_REPOSITORY, node:process.version, package:{ name:pkg.name, version:pkg.version, deps:Object.keys(pkg.dependencies||{}).slice(0,200), devDeps:Object.keys(pkg.devDependencies||{}).slice(0,200)}, lock_hash:lockHash }; fs.mkdirSync('../app', {recursive:true}); fs.writeFileSync('../app/status.json', JSON.stringify(status,null,2));"
          else
            node -e "const fs=require('fs'); const files=fs.readdirSync('.',{withFileTypes:true}).map(d=>({name:d.name,type:d.isDirectory()?'dir':'file'})).slice(0,200); const status={ generated_at:new Date().toISOString(), note:'no package.json found in app repo root', files}; fs.mkdirSync('../app',{recursive:true}); fs.writeFileSync('../app/status.json', JSON.stringify(status,null,2));"
          fi

      - name: Commit & push into ai-telemetry
        run: |
          git config user.email "runner@ai-telemetry.local"
          git config user.name  "AI Telemetry Bot"
          git add app/status.json
          git commit -m "update(app): snapshot from rescuemanager-app" || echo "no changes"
          git push
